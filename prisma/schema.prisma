generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String    @id @default(cuid())
  name             String
  email            String?   @unique
  emailVerified    DateTime?
  image            String
  latitude         Float?
  longitude        Float?
  pwHash           String?
  biography        String   @default("Pas encore de pr√©sentation")
  role             String    @default("user")
  accounts         Account[]
  sessions         Session[]
  Post             Post[]
  Comment          Comment[]
  Chats            Chat[]
  sentMessages     Message[] @relation("sender")
  receivedMessages Message[] @relation("receiver")
  unreadMessages   UserUnreadMessages[]
  passwordResetTokens PasswordResetToken[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Topic {
  id          String @id @default(cuid())
  slug        String @unique
  description String
  posts       Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id      String @id @default(cuid())
  title   String
  content String
  images  String[]
  userId  String
  topicId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  topic    Topic     @relation(fields: [topicId], references: [id])
  comments Comment[]
}

model Comment {
  id       String  @id @default(cuid())
  content  String
  images   String[]
  postId   String
  userId   String
  parentId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parent   Comment?  @relation("Comments", fields: [parentId], references: [id], onDelete: Cascade)
  post     Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  children Comment[] @relation("Comments")
}

model Chat {
  id        String   @id @default(cuid())
  
  users     User[]
  messages  Message[]
  unreadMessages UserUnreadMessages[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id            String   @id @default(cuid())
  content       String
  senderId      String
  senderName    String
  senderImage   String
  sender        User     @relation(name: "sender", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId    String
  receiver      User     @relation(name: "receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  chatId        String
  chat          Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserUnreadMessages {
  id            String   @id @default(cuid())
  userId        String
  chatId        String
  count         Int     @default(0)

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat          Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  createdAt DateTime @default(now())
  resetAt   DateTime?

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

